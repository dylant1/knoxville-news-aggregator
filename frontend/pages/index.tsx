import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import styled from "styled-components";
import { textVide } from "text-vide";

const Hero = styled.main`
  display: flex;
  flex-direction: column;
`;
const Column = styled.div`
  width: 35%;
`;
const Break = styled.span`
  display: block;
  width: 100%;
  border-top: 1px solid #ccc;
`;
const NewsWrapper = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: space-around;
`;

const JobsWrapper = styled.div``;
const Row = styled.div`
  width: 100%;
  justify-content: center;
  align-items: center;
  text-align: center;
`;
const PastXDaysWrapper = styled.div`
  font-size: 14px;
  display: flex;
  align-items: center;
`;
const PastXDays = styled.span<any>`
  background-color: ${(props) => props.backgroundColor};
  padding: 1px 4px;
  border-radius: 10px;
  font-size: 14px;

  border: 1px solid black;
  margin-right: 4px;
  cursor: pointer;
`;
const Header = styled.h1`
  margin: 0;
  padding: 0;
`;
const DateWrapper = styled.div`
  font-size: 10px;
  color: #58595b;
`;
const Home: any = ({ days }: any) => {
  const [utkNews, setUtkNews] = useState<any>([]);
  const [knoxNews, setKnoxNews] = useState<any>([]);
  const [pastXDays, setPastXDays] = useState(2);
  const [bionic, setBionic] = useState(false);
  const [knoxPastXDays, setKnoxPastXDays] = useState(2);
  const [utkPastXDays, setUtkPastXDays] = useState(2);

  const PastWrapper = () => {
    return (
      <PastXDaysWrapper>
        <span
          style={{
            marginRight: "4px",
            fontWeight: "bold",
          }}
        >
          Past:{" "}
        </span>
        <PastXDays backgroundColor={pastXDays == 2 ? "#FF8200" : "none"}>
          Day
        </PastXDays>
        <PastXDays backgroundColor={pastXDays == 7 ? "#FF8200" : "none"}>
          Week
        </PastXDays>
        <PastXDays backgroundColor={pastXDays == 30 ? "#FF8200" : "none"}>
          Month*
        </PastXDays>
      </PastXDaysWrapper>
    );
  };
  useEffect(() => {
    days.forEach((day: any) => {
      day.forEach((headline: any) => {
        if (headline.source === "news.utk.edu") {
          setUtkNews((prevHeadlines: any) => {
            return [...prevHeadlines, headline];
          });
        } else if (headline.source === "knoxnews.com") {
          setKnoxNews((prevHeadlines: any) => {
            return [...prevHeadlines, headline];
          });
        }
      });
    });
  }, []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com"/>
        <link
          href="https://fonts.googleapis.com/css2?family=EB+Garamond:wght@400;500;700&family=Poppins:wght@400;600;700&display=swap"
          rel="stylesheet"
        ></link>
      </Head>

      <Hero>
        <div
          onClick={() => {
            setBionic(!bionic);
          }}
        >
          Bitonic Reading
        </div>
        <NewsWrapper>
          <Column>
            <Header>Knox News</Header>
            <PastWrapper />

            {knoxNews.length > 0 &&
              knoxNews.map((headline: any) => {
                return (
                  <div key={headline.id}>
                    {bionic ? (
                      <a
                        href={headline.link}
                        dangerouslySetInnerHTML={{
                          __html: textVide(headline.headline),
                        }}
                      ></a>
                    ) : (
                      <a href={headline.link}>{headline.headline}</a>
                    )}
                    <DateWrapper>{headline.date}</DateWrapper>
                    <Break />
                  </div>
                );
              })}
          </Column>

          <Column>
            <div>
              <Header>UTK News</Header>
              <PastWrapper />

              {utkNews.length > 0 &&
                utkNews.map((headline: any) => {
                  return (
                    <div key={headline.id}>
                      <div>{textVide(headline.headline)}</div>
                    </div>
                  );
                })}
            </div>
            <div>
              <h1>Jobs</h1>
              {utkNews.length > 0 &&
                utkNews.map((headline: any) => {
                  return (
                    <div key={headline.id}>
                      <div>{headline.headline}</div>
                    </div>
                  );
                })}
            </div>
          </Column>
        </NewsWrapper>
        <JobsWrapper>
          <Row>
            <h1>Jobs</h1>
          </Row>
        </JobsWrapper>
      </Hero>

      <footer>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

Home.getInitialProps = async (ctx: any) => {
  let to = new Date().toISOString().split("T")[0];
  let from: Date = new Date(to);
  from.setDate(from.getDate() - 2);
  let isoFrom = from.toISOString().split("T")[0];
  const res = await fetch(
    `http://localhost:5050/headlines/${Date.parse(to)}-${Date.parse(isoFrom)}`
  );
  const days = await res.json();
  return { days: days };
};

export default Home;
